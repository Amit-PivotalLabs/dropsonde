// Code generated by protoc-gen-gogo.
// source: envelope.proto
// DO NOT EDIT!

package events

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Envelope_EventType int32

const (
	Envelope_DropsondeStatus Envelope_EventType = 1
	Envelope_HttpStart       Envelope_EventType = 2
	Envelope_HttpStop        Envelope_EventType = 3
)

var Envelope_EventType_name = map[int32]string{
	1: "DropsondeStatus",
	2: "HttpStart",
	3: "HttpStop",
}
var Envelope_EventType_value = map[string]int32{
	"DropsondeStatus": 1,
	"HttpStart":       2,
	"HttpStop":        3,
}

func (x Envelope_EventType) Enum() *Envelope_EventType {
	p := new(Envelope_EventType)
	*p = x
	return p
}
func (x Envelope_EventType) String() string {
	return proto.EnumName(Envelope_EventType_name, int32(x))
}
func (x Envelope_EventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *Envelope_EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Envelope_EventType_value, data, "Envelope_EventType")
	if err != nil {
		return err
	}
	*x = Envelope_EventType(value)
	return nil
}

type Origin struct {
	JobName          *string `protobuf:"bytes,1,req,name=jobName" json:"jobName,omitempty"`
	JobInstanceId    *int32  `protobuf:"varint,2,req,name=jobInstanceId" json:"jobInstanceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Origin) Reset()         { *m = Origin{} }
func (m *Origin) String() string { return proto.CompactTextString(m) }
func (*Origin) ProtoMessage()    {}

func (m *Origin) GetJobName() string {
	if m != nil && m.JobName != nil {
		return *m.JobName
	}
	return ""
}

func (m *Origin) GetJobInstanceId() int32 {
	if m != nil && m.JobInstanceId != nil {
		return *m.JobInstanceId
	}
	return 0
}

type Envelope struct {
	Origin           *Origin             `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	EventType        *Envelope_EventType `protobuf:"varint,2,req,name=eventType,enum=events.Envelope_EventType" json:"eventType,omitempty"`
	DropsondeStatus  *DropsondeStatus    `protobuf:"bytes,3,opt,name=dropsondeStatus" json:"dropsondeStatus,omitempty"`
	HttpStart        *HttpStart          `protobuf:"bytes,4,opt,name=httpStart" json:"httpStart,omitempty"`
	HttpStop         *HttpStop           `protobuf:"bytes,5,opt,name=httpStop" json:"httpStop,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}

func (m *Envelope) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *Envelope) GetEventType() Envelope_EventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *Envelope) GetDropsondeStatus() *DropsondeStatus {
	if m != nil {
		return m.DropsondeStatus
	}
	return nil
}

func (m *Envelope) GetHttpStart() *HttpStart {
	if m != nil {
		return m.HttpStart
	}
	return nil
}

func (m *Envelope) GetHttpStop() *HttpStop {
	if m != nil {
		return m.HttpStop
	}
	return nil
}

func init() {
	proto.RegisterEnum("events.Envelope_EventType", Envelope_EventType_name, Envelope_EventType_value)
}
